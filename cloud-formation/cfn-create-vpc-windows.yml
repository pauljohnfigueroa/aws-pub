---
Description: This template deploys a VPC, Subnets, Internet Gateway, and the required EC2 instances.

Parameters:
  EnvironmentName:
    Description: Environment name that will get prefixed to resource names.
    Type: String

  AdminEmailAddress:
    Description: Please enter the email address to be used for notifications.
    Type: String
    ConstraintDescription: 'You must be able to login to this email to confirm the subscription from SNS.'
    Default: ''

  InstanceType1:
    Description: Select an instance type
    Type: 'String'
    Default: 't2.micro'
    AllowedValues: ['t2.micro', 't3.xlarge', 'm5.large']

  KeyPair1:
    Description: Please enter a pre-existing key pair's name.
    Type: String
    Default: ''

  MyIpAddress:
    Description: Please enter the CIDR for your IP Address. Must be in X.X.X.X/32 format.
    Type: String
    Default: 0.0.0.0/0

  VpcCIDR:
    Description: Please enter the CIDR for this VPC. Example 10.0.0.0/16
    Type: String
    Default: 10.0.0.0/16

  VpcPublicSubnet1CIDR:
    Description: Please enter the CIDR for this subnet. Example 10.0.1.0/24
    Type: String
    Default: 10.0.1.0/24

# Windows Server 2022 with SQL Server 2019 Standard AMIs
Mappings:
  RegionMap:
    us-east-1:
      'AMI': 'ami-09301a37d119fe4c5'
    ap-southeast-1:
      'AMI': 'ami-062508d30d9f2cb68'

Resources:
  # Create a VPC
  VPC1:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  # Create an Internet Gateway
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  # Attach the Internet Gateway to the VPC
  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC1

  # Create a public route
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public-Routes

  # Create a default public route to the IGW
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: IGWAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  # Associate subnet to the PublicRouteTable route table
  VpcPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref VpcPublicSubnet1

  # Create a public subnet
  VpcPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select [1, !GetAZs ''] # Create subnet in the second AZ in the Region
      CidrBlock: !Ref VpcPublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet 1

  # Security group
  SecurityGroup1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC1
      GroupDescription: 'Allow RDP via port 3389 from MyIpAddress only'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: !Ref MyIpAddress
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-sg1

  # Create an EC2 instance
  EC2Instance1Profile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: '/'
      Roles:
        - Ref: 'S3BucketForBackupsRole'

  # Create an EC2 instance
  EC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref KeyPair1
      SubnetId: !Ref VpcPublicSubnet1
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      InstanceType: !Ref InstanceType1
      IamInstanceProfile: !Ref EC2Instance1Profile
      SecurityGroupIds:
        - !Ref SecurityGroup1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ec2-1

  # SNS Topic
  MySNSTopic1:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: ServerAlarmNotifications # Optional
      TopicName: ServerAlarmNotifications

  # SNS Topic 1
  MySNSEmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref MySNSTopic1
      Endpoint: !Ref AdminEmailAddress

  # Alarm Avg. CPUUtilization Exceeds 80%
  CloudWatchAlarm1:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CPUUtilizationExceeded80
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: 60 # 1 minute
      Statistic: Average
      Threshold: 80
      AlarmDescription: 'CPU Utilization exceeded 80%.'
      Dimensions:
        - Name: InstanceId
          Value: !Ref EC2Instance1
      AlarmActions:
        - !Ref MySNSTopic1

  # Cloudwatch Log Group
  LogGroup1:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/events/test-log-group

  # EventBridge
  EventBridgeRule1:
    Type: AWS::Events::Rule
    Properties:
      Description: Notify Administrator when EC2 instance state changes
      EventBusName: default
      EventPattern:
        source:
          - 'aws.ec2'
        detail-type:
          - 'EC2 Instance State-change Notification'
      Name: Ec2InstanceStateChange
      Targets:
        - Id: CloudWatchLogs1
          Arn: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroup1}'
  # TODO
  # Create an SNS topic for Instance State Change
  # Send email to the Administrator whenever Instance State Changes [starting, stopping, etc]
  # Create a log group for CPUUtilization Alarms

  # Create an S3 Bucket for the backups
  S3BucketForBackups:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain

  # Bucket Role
  S3BucketForBackupsRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
                - ec2.amazonaws.com

  # Bucket Assume Role Policy
  S3BucketForBackupsPolicy1:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 's3:PutObject'
              - 's3:GetObject'
              - 's3:DeleteObject'
              - 's3:ListBucket'
            Effect: Allow
            Resource:
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref S3BucketForBackups
              - !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref S3BucketForBackups
                  - /*
      PolicyName: S3BucketForBackupsPolicy
      Roles:
        - !Ref S3BucketForBackupsRole

  # VPC Endpoint Gateway for S3
  S3GatewayEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref PublicRouteTable
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcEndpointType: Gateway
      VpcId: !Ref VPC1
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 's3:*'
            Resource:
              - !GetAtt S3BucketForBackups.Arn
              - !Sub '${S3BucketForBackups.Arn}/*'
