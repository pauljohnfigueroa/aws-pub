---
Description: This template deploys a VPC, Subnets, Internet Gateway, and the required EC2 instances.

Parameters:
  EnvironmentName:
    Description: Environment name that will get prefixed to resource names
    Type: String

  MyEmailAddress:
    Description: Please enter your email to be used with SNS
    Type: String
    Default: ''

  MyIpAddress:
    Description: Please enter the CIDR for your Ip address
    Type: String
    Default: 0.0.0.0/0

  VpcCIDR:
    Description: Please enter the CIDR for this VPC
    Type: String
    Default: 10.0.0.0/16

  VpcPublicSubnet1CIDR:
    Description: Please enter the CIDR for this subnet
    Type: String
    Default: 10.0.1.0/24

  DbBackupS3Bucket:
    Description: Please enter the S3 bucket name for the database backups (bucket must be pre-existing)
    Type: String
    Default: ''

Mappings:
  RegionMap:
    us-east-1:
      'AMI': 'ami-09301a37d119fe4c5'
    ap-southeast-1:
      'AMI': 'ami-062508d30d9f2cb68'

Resources:
  # VPC
  VPC1:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  # Internet Gateway
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  # Attach Internet Gateway to the VPC
  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC1

  # Public routes
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Public-Routes

  # Default Public Route
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: IGWAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW

  # Associate subnet
  VpcPublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref VpcPublicSubnet1

  # Public Subnet
  VpcPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC1
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: !Ref VpcPublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet 1

  # Security group
  SecurityGroup1:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC1
      GroupDescription: 'Allow RDP via port 3389 from 0.0.0.0/0'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: !Ref MyIpAddress
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-sg1

  # EC2
  EC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: 'test-keypair' # key pair
      SubnetId: !Ref VpcPublicSubnet1
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      InstanceType: t2.micro
      SecurityGroupIds:
        - !Ref SecurityGroup1
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ec2-1

  # SNS Topic
  MySNSTopic1:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: ServerAlarmNotifications # Optional
      TopicName: ServerAlarmNotifications

  # SNS Topic 1
  MySNSEmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref MySNSTopic1
      Endpoint: !Ref MyEmailAddress

  # Alarm
  CloudWatchAlarm1:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CPUUtilizationExceeded80
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: 60
      Statistic: Average
      Threshold: 80
      AlarmDescription: 'CPU Utilization exceeded 80%.'
      Dimensions:
        - Name: InstanceId
          Value: !Ref EC2Instance1
      AlarmActions:
        - !Ref MySNSTopic1

  # Cloudwatch Log Group
  LogGroup1:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/events/test-log-group

  # EventBridge
  EventBridgeRule1:
    Type: AWS::Events::Rule
    Properties:
      Description: Notify Administrator when EC2 instance state changes
      EventBusName: default
      EventPattern:
        source:
          - 'aws.ec2'
        detail-type:
          - 'EC2 Instance State-change Notification'
      Name: Ec2InstanceStateChange
      Targets:
        - Id: CloudWatchLogs1
          Arn: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroup1}'
  # TODO
  # Create an SNS topic for Instance State Change
  # Send email to the Administrator whenever Instance State Changes [starting, stopping, etc]
  # Create a log group for CPUUtilization Alarms

  # VPC Endpoint Gateway for S3
  S3GatewayEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref PublicRouteTable
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcEndpointType: Gateway
      VpcId: !Ref VPC1
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 's3:*'
            Resource:
              - !Sub 'arn:aws:s3:::${DbBackupS3Bucket}'
                !Sub 'arn:aws:s3:::${DbBackupS3Bucket}/*'
